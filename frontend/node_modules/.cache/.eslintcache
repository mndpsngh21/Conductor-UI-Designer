[{"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/index.js":"1","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/App.js":"2","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/Flow.js":"3","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/context/WorkflowContext.js":"4","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/Sidebar.js":"5","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/NodeOptions.js":"6","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/PropertiesPanel.js":"7","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/UndoRedo.js":"8","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/SaveLoad.js":"9","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/data/nodeOptions.js":"10","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/useWorkflowStore.js":"11","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/TestFlow.js":"12","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/TaskPopup.js":"13","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/nodetypes/CustomNode.js":"14","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/nodetypes/Start.js":"15"},{"size":203,"mtime":1727971407597,"results":"16","hashOfConfig":"17"},{"size":211,"mtime":1728103825330,"results":"18","hashOfConfig":"17"},{"size":8178,"mtime":1728317360983,"results":"19","hashOfConfig":"17"},{"size":2821,"mtime":1727972642323,"results":"20","hashOfConfig":"17"},{"size":1651,"mtime":1728194599422,"results":"21","hashOfConfig":"17"},{"size":1466,"mtime":1727971308489,"results":"22","hashOfConfig":"17"},{"size":1339,"mtime":1727971384957,"results":"23","hashOfConfig":"17"},{"size":958,"mtime":1727971373789,"results":"24","hashOfConfig":"17"},{"size":2068,"mtime":1727971975424,"results":"25","hashOfConfig":"17"},{"size":412,"mtime":1727968489864,"results":"26","hashOfConfig":"17"},{"size":737,"mtime":1727972918139,"results":"27","hashOfConfig":"17"},{"size":1221,"mtime":1728103679466,"results":"28","hashOfConfig":"17"},{"size":1848,"mtime":1728197703441,"results":"29","hashOfConfig":"17"},{"size":1641,"mtime":1728317027923,"results":"30","hashOfConfig":"17"},{"size":1209,"mtime":1728317696267,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"awlpqn",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/index.js",[],["68","69"],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/App.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/Flow.js",["70","71","72","73","74","75"],"import React, { useState, useCallback, useMemo } from 'react';\nimport ReactFlow, {\n  Background,\n  Controls,\n  MiniMap,\n  useNodesState,\n  useEdgesState,\n  addEdge,\n} from 'react-flow-renderer';\nimport CustomNode from './nodetypes/CustomNode.js';\nimport Start from './nodetypes/Start.js';\nimport Modal from 'react-modal';\nimport './styles.css'; // Ensure you have the necessary styles\nimport TaskPopup from './components/TaskPopup';\n\n// Define node styles\nconst nodeStyles = {\n  start1: { background: '#28a745', color: '#fff' },\n  task: { background: '#17a2b8', color: '#fff' },\n  decision: { background: '#ffc107', color: '#fff' },\n  end: { background: '#dc3545', color: '#fff' },\n};\n\nconst Flow = () => {\n  // Initialize nodes and edges with useNodesState and useEdgesState hooks\n  const initialNodes = [\n    {\n      id: 'node-1',\n      type: 'StartNode',\n      data: { label: 'Start', type: 'StartNode', id :'1' },\n      position: { x: 250, y: 5 },\n      style: nodeStyles.start,\n    },\n  ];\n\n  const initialEdges = [];\n\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n\n\n    // Modal styles\n// src/Flow.js\n\nconst  modalStyles = {\n    content: {    \n      left: '50%',\n      right: 'auto',\n      bottom: 'auto',\n      marginRight: '-50%',\n      transform: 'translate(-50%, -50%)',\n      padding: '20px',\n      borderRadius: '8px',      \n      boxShadow: '0 4px 8px rgba(0,0,0,0.2)',\n      zIndex: 1000, // Added z-index\n      overflow: 'inherit',\n      \n    },\n    overlay: {    \n      zIndex: 999, // Ensure overlay covers everything beneath\n    }\n  };\n\n\n  // Modal state\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  \n  const [currentNodeId, setCurrentNodeId] = useState(null);\n\n  const [mStyle, setModalStyles] = useState(modalStyles);\n\n\n  \n\n\n  // Function to open the modal\n  const openModal = useCallback((nodeId, callerID) => {\n\n    setCurrentNodeId(nodeId);\n    setModalIsOpen(true);\n    const element = document.getElementById(callerID);\n    const btnBottom= element.getBoundingClientRect().y;\n    var existing = mStyle;\n    existing.content.top= btnBottom+ 200 + 'px';\n    setModalStyles(existing);\n  }, []);\n\n  // Function to close the modal\n  const closeModal = () => {\n    setModalIsOpen(false);\n    setCurrentNodeId(null);\n  };\n\n  // Function to handle node type selection from modal\n  const handleNodeTypeSelection = (type) => {\n    if (!currentNodeId) {\n      closeModal();\n      return;\n    }\n\n    // Find the position of the current node\n    const currentNode = nodes.find((node) => node.id === currentNodeId);\n    if (!currentNode) {\n      closeModal();\n      return;\n    }\n\n    // Define new node ID\n    const newNodeId = `${nodes.length + 1}`;\n\n    // Position the new node below the current node\n    const newPosition = { x: currentNode.position.x, y: currentNode.position.y + 100 };\n\n    // Define the new node\n    const newNode = {\n      id: newNodeId,\n      type: 'customNode',\n      data: { label: `${type.charAt(0).toUpperCase() + type.slice(1)}`, type , id: newNodeId },\n      position: newPosition,\n      style: nodeStyles[type],\n    };\n\n    // Add the new node\n    setNodes((nds) => nds.concat(newNode));\n\n    // Add the edge connecting current node to the new node\n    const newEdge = {\n      id: `e${currentNodeId}-${newNodeId}`,\n      source: currentNodeId,\n      target: newNodeId,\n      animated: true,\n    };\n    setEdges((eds) => eds.concat(newEdge));\n\n    // Close the modal\n    closeModal();\n  };\n\n  const onConnectHandler = useCallback(\n    (params) => setEdges((eds) => addEdge(params, eds)),\n    [setEdges]\n  );\n\n  // Memoize nodeTypes to prevent recreation on each render\n  const nodeTypesDefinition = useMemo(() => {\n    return {\n      customNode: (props) => <CustomNode {...props} openModal={openModal} />,\n      All : (props) => <CustomNode {...props} openModal={openModal}/>,\n      StartNode : (props) => <Start {...props} openModal={openModal}/>,\n    };\n  }, [openModal]);\n  const tasks = [\n    { id: '1', name: 'Worker Task (Simple)', description: 'Runs a Worker task.', icon: '🔧', type: 'All' },\n    { id: '2', name: 'Event Task', description: 'Runs an event task.', icon: '📅', type: 'customNode' },\n    { id: '3', name: 'HTTP Task', description: 'Call an HTTP endpoint.', icon: '🌐', type: 'System' },\n    // Add more tasks as needed\n  ];\n\n  \n\n  const onTaskSelect = (task) => {\n\n    const currentNode = nodes.find((node) => node.id === `node-${nodes.length}`);\n\n    if (!currentNode) {\n        closeModal();\n        return;\n      }\n  \n      // Define new node ID\n      const newNodeId = `${nodes.length + 1}`;\n  \n      // Position the new node below the current node\n      const newPosition = { x: currentNode.position.x, y: currentNode.position.y + 100 };\n\n    const newNode = {\n      id: `node-${nodes.length + 1}`,\n      type: task.type, // task.type should match the type of your custom node\n      position: newPosition,\n      data: { label: task.name }\n    };\n\n       // Add the edge connecting current node to the new node\n       const newEdge = {\n        id: `e${nodes.length}-${nodes.length + 1}`,\n        source: `node-${nodes.length}`,\n        target: `node-${nodes.length+1}`,\n        animated: true,\n      };\n      setNodes((nds) => nds.concat(newNode));\n      setEdges((eds) => eds.concat(newEdge));\n    closeModal(); // Close the modal after task selection\n  };\n\n  return (\n    <div className=\"flow-container\">\n      {/* Sidebar can remain as is or be repurposed */}\n      <div className=\"sidebar\">\n        <h2>Workflow Editor</h2>\n        {/* Sidebar functionality can be added here if needed */}\n      </div>\n      <div className=\"reactflow-wrapper\">\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          onConnect={onConnectHandler}\n          nodeTypes={nodeTypesDefinition} // Use the memoized nodeTypes\n          fitView\n          style={{ width: '100%', height: '100%' }}\n        >\n          <Background color=\"#aaa\" gap={16} />\n          <Controls />\n          <MiniMap nodeColor={(node) => nodeStyles[node.data.type]?.background || '#eee'} />\n        </ReactFlow>\n      </div>\n\n      {/* Modal for selecting the next node type */}\n      <Modal\n        isOpen={modalIsOpen}\n        onRequestClose={closeModal}\n        contentLabel=\"Select Next Node Type\"\n        ariaHideApp={false} // Set to true in production and bind modal to your appElement\n        style={mStyle}\n        shouldCloseOnOverlayClick={true}\n      >\n        <TaskPopup tasks={tasks} onTaskSelect={onTaskSelect} closeModal={closeModal}/>\n        {/* <h2>Select Next Node Type</h2>\n        <div style={modalContentStyles}>\n          <button\n            onClick={() => handleNodeTypeSelection('task')}\n            style={{ ...buttonStyles, backgroundColor: nodeStyles.task.background }}\n          >\n            Task\n          </button>\n          <button\n            onClick={() => handleNodeTypeSelection('decision')}\n            style={{ ...buttonStyles, backgroundColor: nodeStyles.decision.background }}\n          >\n            Decision\n          </button>\n          <button\n            onClick={() => handleNodeTypeSelection('end')}\n            style={{ ...buttonStyles, backgroundColor: nodeStyles.end.background }}\n          >\n            End\n          </button>\n        </div>\n        <div style={{ textAlign: 'right' }}>\n          <button onClick={closeModal} style={cancelButtonStyles}>\n            Cancel\n          </button>\n        </div> */}\n      </Modal>\n    </div>\n  );\n};\n\n\n// Modal content styles\nconst modalContentStyles = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  marginTop: '20px',\n};\n\n// Button styles\nconst buttonStyles = {\n  padding: '10px 20px',\n  border: 'none',\n  borderRadius: '4px',\n  color: '#fff',\n  cursor: 'pointer',\n  fontSize: '14px',\n};\n\n// Cancel button styles\nconst cancelButtonStyles = {\n  padding: '8px 16px',\n  backgroundColor: '#6c757d',\n  border: 'none',\n  borderRadius: '4px',\n  color: '#fff',\n  cursor: 'pointer',\n  fontSize: '14px',\n};\n\nexport default Flow;\n","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/context/WorkflowContext.js",["76","77"],"// src/context/WorkflowContext.js\n\nimport React, { createContext, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport nodeOptions from '../data/nodeOptions';\n\nexport const WorkflowContext = createContext();\n\nexport const WorkflowProvider = ({ children }) => {\n  const [nodes, setNodes] = useState([\n    {\n      id: '1',\n      type: 'start',\n      data: { label: 'Start' },\n      position: { x: 250, y: 5 },\n    },\n  ]);\n\n  const [edges, setEdges] = useState([]);\n  const [history, setHistory] = useState([]);\n  const [future, setFuture] = useState([]);\n\n  const addNode = (sourceNode, option) => {\n    const newNodeId = uuidv4();\n    const newNode = {\n      id: newNodeId,\n      type: option.type,\n      data: { label: option.label },\n      position: {\n        x: sourceNode.position.x + 150,\n        y: sourceNode.position.y + 100,\n      },\n    };\n\n    const newNodes = [...nodes, newNode];\n    const newEdge = {\n      id: `${sourceNode.id}-${newNodeId}`,\n      source: sourceNode.id,\n      target: newNodeId,\n    };\n    const newEdges = [...edges, newEdge];\n\n    setHistory([...history, { nodes, edges }]);\n    setFuture([]);\n\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n\n  const updateNode = (id, newData) => {\n    const updatedNodes = nodes.map((node) =>\n      node.id === id ? { ...node, data: { ...node.data, ...newData } } : node\n    );\n\n    setHistory([...history, { nodes, edges }]);\n    setFuture([]);\n\n    setNodes(updatedNodes);\n  };\n\n  const undo = () => {\n    if (history.length === 0) return;\n    const previous = history[history.length - 1];\n    const newHistory = history.slice(0, history.length - 1);\n    setHistory(newHistory);\n    setFuture([{ nodes, edges }, ...future]);\n    setNodes(previous.nodes);\n    setEdges(previous.edges);\n  };\n\n  const redo = () => {\n    if (future.length === 0) return;\n    const next = future[0];\n    const newFuture = future.slice(1);\n    setHistory([...history, { nodes, edges }]);\n    setFuture(newFuture);\n    setNodes(next.nodes);\n    setEdges(next.edges);\n  };\n\n  const saveWorkflow = (workflowName, version) => {\n    const workflowDef = {\n      name: workflowName,\n      version: version,\n      tasks: nodes.map((node) => ({\n        name: node.data.label,\n        taskReferenceName: node.id,\n        type: node.type,\n        // Add additional task properties as needed\n      })),\n      // Define workflow-level properties\n    };\n\n    // Integrate with Netflix Conductor API\n    // Example: createWorkflow(workflowDef).then(...).catch(...);\n  };\n\n  return (\n    <WorkflowContext.Provider\n      value={{\n        nodes,\n        setNodes,\n        edges,\n        setEdges,\n        addNode,\n        updateNode,\n        undo,\n        redo,\n        saveWorkflow,\n      }}\n    >\n      Demo\n      {children}\n    </WorkflowContext.Provider>\n  );\n};\n",["78","79"],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/Sidebar.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/NodeOptions.js",[],["80","81"],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/PropertiesPanel.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/UndoRedo.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/SaveLoad.js",["82","83"],"// src/components/SaveLoad.js\n\nimport React, { useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { WorkflowContext } from '../context/WorkflowContext';\n\nconst Button = styled.button`\n  margin: 5px 0;\n  padding: 8px 12px;\n  background: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  width: 100%;\n\n  &:hover {\n    background: #45a049;\n  }\n`;\n\nconst LoadInput = styled.input`\n  margin: 5px 0;\n  padding: 8px;\n  width: 100%;\n`;\n\nconst SaveLoad = () => {\n  const { nodes, edges, setNodes, setEdges, saveWorkflow } = useContext(WorkflowContext);\n  const [workflowName, setWorkflowName] = useState('');\n  const [version, setVersion] = useState('');\n\n  const handleSave = () => {\n    if (!workflowName || !version) {\n      alert('Please provide Workflow Name and Version');\n      return;\n    }\n    saveWorkflow(workflowName, version);\n    alert('Workflow saved successfully!');\n  };\n\n  const handleLoad = (e) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (event) => {\n      try {\n        const data = JSON.parse(event.target.result);\n        setNodes(data.nodes);\n        setEdges(data.edges);\n      } catch (error) {\n        alert('Invalid JSON file');\n      }\n    };\n    if (e.target.files[0]) {\n      fileReader.readAsText(e.target.files[0]);\n    }\n  };\n\n  return (\n    <div>\n      <Button onClick={handleSave}>Save Workflow to Conductor</Button>\n      <input\n        type=\"text\"\n        placeholder=\"Workflow Name\"\n        value={workflowName}\n        onChange={(e) => setWorkflowName(e.target.value)}\n        style={{ width: '100%', padding: '8px', margin: '5px 0' }}\n      />\n      <input\n        type=\"text\"\n        placeholder=\"Version\"\n        value={version}\n        onChange={(e) => setVersion(e.target.value)}\n        style={{ width: '100%', padding: '8px', margin: '5px 0' }}\n      />\n      <Button onClick={handleSave}>Save Workflow</Button>\n      <LoadInput type=\"file\" accept=\"application/json\" onChange={handleLoad} />\n    </div>\n  );\n};\n\nexport default SaveLoad;\n","/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/data/nodeOptions.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/useWorkflowStore.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/TestFlow.js",["84"],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/components/TaskPopup.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/nodetypes/CustomNode.js",[],"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/nodetypes/Start.js",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":86,"column":6,"nodeType":"91","endLine":86,"endColumn":8,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":95,"column":9,"nodeType":"95","messageId":"96","endLine":95,"endColumn":32},{"ruleId":"93","severity":1,"message":"97","line":171,"column":13,"nodeType":"95","messageId":"96","endLine":171,"endColumn":22},{"ruleId":"93","severity":1,"message":"98","line":262,"column":7,"nodeType":"95","messageId":"96","endLine":262,"endColumn":25},{"ruleId":"93","severity":1,"message":"99","line":269,"column":7,"nodeType":"95","messageId":"96","endLine":269,"endColumn":19},{"ruleId":"93","severity":1,"message":"100","line":279,"column":7,"nodeType":"95","messageId":"96","endLine":279,"endColumn":25},{"ruleId":"93","severity":1,"message":"101","line":5,"column":8,"nodeType":"95","messageId":"96","endLine":5,"endColumn":19},{"ruleId":"93","severity":1,"message":"102","line":82,"column":11,"nodeType":"95","messageId":"96","endLine":82,"endColumn":22},{"ruleId":"85","replacedBy":"103"},{"ruleId":"87","replacedBy":"104"},{"ruleId":"85","replacedBy":"105"},{"ruleId":"87","replacedBy":"106"},{"ruleId":"93","severity":1,"message":"107","line":29,"column":11,"nodeType":"95","messageId":"96","endLine":29,"endColumn":16},{"ruleId":"93","severity":1,"message":"108","line":29,"column":18,"nodeType":"95","messageId":"96","endLine":29,"endColumn":23},{"ruleId":"93","severity":1,"message":"109","line":18,"column":19,"nodeType":"95","messageId":"96","endLine":18,"endColumn":27},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'mStyle'. Either include it or remove the dependency array.","ArrayExpression",["112"],"no-unused-vars","'handleNodeTypeSelection' is assigned a value but never used.","Identifier","unusedVar","'newNodeId' is assigned a value but never used.","'modalContentStyles' is assigned a value but never used.","'buttonStyles' is assigned a value but never used.","'cancelButtonStyles' is assigned a value but never used.","'nodeOptions' is defined but never used.","'workflowDef' is assigned a value but never used.",["110"],["111"],["110"],["111"],"'nodes' is assigned a value but never used.","'edges' is assigned a value but never used.","'setNodes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},"Update the dependencies array to be: [mStyle]",{"range":"115","text":"116"},[2224,2226],"[mStyle]"]