{"ast":null,"code":"var _jsxFileName = \"/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/Flow.js\",\n  _s = $RefreshSig$();\n// src/Flow.js\n\nimport React, { useState } from 'react';\nimport ReactFlow, { Background, Controls } from 'react-flow-renderer';\nimport Sidebar from './components/Sidebar';\n\n// Define node types for rendering\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  task: ({\n    data\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node task\",\n    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this),\n  start: ({\n    data\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node start\",\n    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this),\n  end: ({\n    data\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node end\",\n    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this),\n  decision: ({\n    data\n  }) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"node decision\",\n    children: /*#__PURE__*/_jsxDEV(\"strong\", {\n      children: data.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this)\n};\nconst Flow = () => {\n  _s();\n  const [nodes, setNodes] = useState([{\n    id: '1',\n    type: 'start',\n    data: {\n      label: 'Start'\n    },\n    position: {\n      x: 250,\n      y: 5\n    }\n  }]);\n  const [edges, setEdges] = useState([]);\n\n  // Function to add nodes\n  const addNode = (type, position) => {\n    const id = `${nodes.length + 1}`; // Unique ID generation\n    const newNode = {\n      id,\n      type,\n      data: {\n        label: type.charAt(0).toUpperCase() + type.slice(1)\n      },\n      // Capitalized label\n      position\n    };\n    console.log(\"Adding new node:\", newNode); // Debug log\n    setNodes(prevNodes => [...prevNodes, newNode]);\n  };\n\n  // Function to add edges\n  const addEdge = (source, target) => {\n    const newEdge = {\n      id: `${source}-${target}`,\n      source,\n      target\n    };\n    setEdges(prevEdges => [...prevEdges, newEdge]);\n  };\n\n  // Connect nodes\n  const onConnect = params => {\n    console.log(\"Connecting nodes:\", params); // Debug log\n    addEdge(params.source, params.target);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flow-container\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      addNode: addNode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(ReactFlow, {\n      elements: [...nodes, ...edges],\n      onConnect: onConnect,\n      nodeTypes: nodeTypes,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(Flow, \"dMi3dSi/d/ARIer1nc6wbRLYwDE=\");\n_c = Flow;\nexport default Flow;\nvar _c;\n$RefreshReg$(_c, \"Flow\");","map":{"version":3,"names":["React","useState","ReactFlow","Background","Controls","Sidebar","jsxDEV","_jsxDEV","nodeTypes","task","data","className","children","label","fileName","_jsxFileName","lineNumber","columnNumber","start","end","decision","Flow","_s","nodes","setNodes","id","type","position","x","y","edges","setEdges","addNode","length","newNode","charAt","toUpperCase","slice","console","log","prevNodes","addEdge","source","target","newEdge","prevEdges","onConnect","params","elements","style","width","height","color","gap","_c","$RefreshReg$"],"sources":["/media/mandeep/Files/R&D/Workflow-Designer/frontend/src/Flow.js"],"sourcesContent":["// src/Flow.js\n\nimport React, { useState } from 'react';\nimport ReactFlow, { Background, Controls } from 'react-flow-renderer';\nimport Sidebar from './components/Sidebar';\n\n// Define node types for rendering\nconst nodeTypes = {\n  task: ({ data }) => (\n    <div className=\"node task\">\n      <strong>{data.label}</strong>\n    </div>\n  ),\n  start: ({ data }) => (\n    <div className=\"node start\">\n      <strong>{data.label}</strong>\n    </div>\n  ),\n  end: ({ data }) => (\n    <div className=\"node end\">\n      <strong>{data.label}</strong>\n    </div>\n  ),\n  decision: ({ data }) => (\n    <div className=\"node decision\">\n      <strong>{data.label}</strong>\n    </div>\n  ),\n};\n\nconst Flow = () => {\n  const [nodes, setNodes] = useState([\n    {\n      id: '1',\n      type: 'start',\n      data: { label: 'Start' },\n      position: { x: 250, y: 5 },\n    },\n  ]);\n\n  const [edges, setEdges] = useState([]);\n\n  // Function to add nodes\n  const addNode = (type, position) => {\n    const id = `${nodes.length + 1}`; // Unique ID generation\n    const newNode = {\n      id,\n      type,\n      data: { label: type.charAt(0).toUpperCase() + type.slice(1) }, // Capitalized label\n      position,\n    };\n\n    console.log(\"Adding new node:\", newNode); // Debug log\n    setNodes((prevNodes) => [...prevNodes, newNode]);\n  };\n\n  // Function to add edges\n  const addEdge = (source, target) => {\n    const newEdge = { id: `${source}-${target}`, source, target };\n    setEdges((prevEdges) => [...prevEdges, newEdge]);\n  };\n\n  // Connect nodes\n  const onConnect = (params) => {\n    console.log(\"Connecting nodes:\", params); // Debug log\n    addEdge(params.source, params.target);\n  };\n\n  return (\n    <div className=\"flow-container\">\n      <Sidebar addNode={addNode} /> {/* Pass addNode function to Sidebar */}\n      <ReactFlow\n        elements={[...nodes, ...edges]}\n        onConnect={onConnect}\n        nodeTypes={nodeTypes}\n        style={{ width: '100%', height: '100%' }}\n      >\n        <Background color=\"#aaa\" gap={16} />\n        <Controls />\n      </ReactFlow>\n    </div>\n  );\n};\n\nexport default Flow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}